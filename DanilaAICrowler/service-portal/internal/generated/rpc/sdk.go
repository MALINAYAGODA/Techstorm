// Package rpc provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package rpc

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Численный код ошибки
	Code int `json:"code"`

	// Data Дополнительная информация об ошибке в произвольном формате
	Data any `json:"data,omitempty"`

	// Message Сообщение с пояснением об ошибке
	Message string `json:"message"`
}

// RenderResult Модель результата рендеринга ссылки.
type RenderResult struct {
	// PageText Текст страницы, как будто выделил все мышкой и скопировал.
	PageText string `json:"pageText"`

	// RenderedHtml HTML код загруженной страницы, возможно с постобработкой.
	RenderedHtml string `json:"renderedHtml"`

	// Url Исходный URL ссылки.
	Url string `json:"url"`
}

// SearchSnippet Модель элемента поисковой выдачи.
type SearchSnippet struct {
	// Attributes Дополнительная информация об объекте в формате ключ-значение.
	Attributes *map[string]string `json:"attributes,omitempty"`

	// Currency Знак валюты цены товара (опционально, только вместе с price).
	Currency *string `json:"currency,omitempty"`

	// Description Краткое описание страницы.
	Description string `json:"description"`

	// ImageUrl Ссылка на картинку объекта
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Link Ссылка на страницу.
	Link string `json:"link"`

	// Position Порядковый номер в выдаче. 1 - первое место в выдаче.
	Position int `json:"position"`

	// Price Цена товара (опционально).
	Price *float32 `json:"price,omitempty"`

	// Rating Рейтинг продукта (опционально).
	Rating *float32 `json:"rating,omitempty"`

	// RatingCount Количество оценок (опционально, только вместе с rating).
	RatingCount *int `json:"ratingCount,omitempty"`

	// Title Название страницы.
	Title string `json:"title"`
}

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalError defines model for InternalError.
type InternalError = ErrorResponse

// PerformSearchJSONBody defines parameters for PerformSearch.
type PerformSearchJSONBody struct {
	// Query Поисковый запрос
	Query string `json:"query"`
}

// RenderPagesJSONBody defines parameters for RenderPages.
type RenderPagesJSONBody struct {
	Urls []string `json:"urls"`
}

// PerformSearchJSONRequestBody defines body for PerformSearch for application/json ContentType.
type PerformSearchJSONRequestBody PerformSearchJSONBody

// RenderPagesJSONRequestBody defines body for RenderPages for application/json ContentType.
type RenderPagesJSONRequestBody RenderPagesJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Выполнить поиск по запросу в поисковом движке
	// (POST /performSearch)
	PerformSearch(ctx echo.Context) error
	// Отрендерить несколько страниц в HTML
	// (POST /renderPages)
	RenderPages(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PerformSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PerformSearch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PerformSearch(ctx)
	return err
}

// RenderPages converts echo context to params.
func (w *ServerInterfaceWrapper) RenderPages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RenderPages(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/performSearch", wrapper.PerformSearch)
	router.POST(baseURL+"/renderPages", wrapper.RenderPages)

}

type BadRequestJSONResponse ErrorResponse

type InternalErrorJSONResponse ErrorResponse

type PerformSearchRequestObject struct {
	Body *PerformSearchJSONRequestBody
}

type PerformSearchResponseObject interface {
	VisitPerformSearchResponse(w http.ResponseWriter) error
}

type PerformSearch200JSONResponse struct {
	Result struct {
		Snippets []SearchSnippet `json:"snippets"`
	} `json:"result"`
	Status int `json:"status"`
}

func (response PerformSearch200JSONResponse) VisitPerformSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PerformSearch400JSONResponse struct{ BadRequestJSONResponse }

func (response PerformSearch400JSONResponse) VisitPerformSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PerformSearch500JSONResponse struct{ InternalErrorJSONResponse }

func (response PerformSearch500JSONResponse) VisitPerformSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RenderPagesRequestObject struct {
	Body *RenderPagesJSONRequestBody
}

type RenderPagesResponseObject interface {
	VisitRenderPagesResponse(w http.ResponseWriter) error
}

type RenderPages200JSONResponse struct {
	Result struct {
		CompleteTasks []RenderResult `json:"completeTasks"`
	} `json:"result"`
	Status int `json:"status"`
}

func (response RenderPages200JSONResponse) VisitRenderPagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RenderPages400JSONResponse struct{ BadRequestJSONResponse }

func (response RenderPages400JSONResponse) VisitRenderPagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RenderPages500JSONResponse struct{ InternalErrorJSONResponse }

func (response RenderPages500JSONResponse) VisitRenderPagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Выполнить поиск по запросу в поисковом движке
	// (POST /performSearch)
	PerformSearch(ctx context.Context, request PerformSearchRequestObject) (PerformSearchResponseObject, error)
	// Отрендерить несколько страниц в HTML
	// (POST /renderPages)
	RenderPages(ctx context.Context, request RenderPagesRequestObject) (RenderPagesResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PerformSearch operation middleware
func (sh *strictHandler) PerformSearch(ctx echo.Context) error {
	var request PerformSearchRequestObject

	var body PerformSearchJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PerformSearch(ctx.Request().Context(), request.(PerformSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PerformSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PerformSearchResponseObject); ok {
		return validResponse.VisitPerformSearchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RenderPages operation middleware
func (sh *strictHandler) RenderPages(ctx echo.Context) error {
	var request RenderPagesRequestObject

	var body RenderPagesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RenderPages(ctx.Request().Context(), request.(RenderPagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenderPages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RenderPagesResponseObject); ok {
		return validResponse.VisitRenderPagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
